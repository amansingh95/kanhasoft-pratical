{"ast":null,"code":"import axios from \"axios\";\nimport { USER_LOGIN_REQUEST, USER_LOGIN_SUCCESS, USER_LOGIN_FAIL, USER_REGISTER_REQUEST, USER_REGISTER_SUCCESS, USER_REGISTER_FAIL, USER_LIST_REQUEST, USER_LIST_SUCCESS, USER_LIST_FAIL, USER_LIST_RESET } from \"../constants/userConstants\";\nexport const login = (email, password) => async dispatch => {\n  try {\n    dispatch({\n      type: USER_LOGIN_REQUEST\n    });\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    const {\n      data\n    } = await axios.post('/api/users/login', {\n      email,\n      password\n    }, config);\n    dispatch({\n      type: USER_LOGIN_SUCCESS,\n      payload: data\n    });\n    localStorage.setItem('userInfo', JSON.stringify(data));\n  } catch (error) {\n    dispatch({\n      type: USER_LOGIN_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};\nexport const register = (name, email, password) => async dispatch => {\n  try {\n    dispatch({\n      type: USER_REGISTER_REQUEST\n    });\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    const {\n      data\n    } = await axios.post('/api/users', {\n      name,\n      email,\n      password\n    }, config);\n    dispatch({\n      type: USER_REGISTER_SUCCESS,\n      payload: data\n    });\n    dispatch({\n      type: USER_LOGIN_SUCCESS,\n      payload: data\n    });\n    localStorage.setItem('userInfo', JSON.stringify(data));\n  } catch (error) {\n    dispatch({\n      type: USER_REGISTER_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};\nexport const listUser = () => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: USER_LIST_REQUEST\n    });\n    const {\n      userLogin: {\n        userInfo\n      }\n    } = getState();\n    const config = {\n      headers: {\n        Authorization: `Bearer ${userInfo.token}`\n      }\n    };\n    const {\n      data\n    } = await axios.get(`/api/users`, config);\n    dispatch({\n      type: USER_LIST_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: USER_LIST_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};","map":{"version":3,"sources":["/home/aman/React/port-folio-project/aman-pratical/frontend/src/actions/userActions.js"],"names":["axios","USER_LOGIN_REQUEST","USER_LOGIN_SUCCESS","USER_LOGIN_FAIL","USER_REGISTER_REQUEST","USER_REGISTER_SUCCESS","USER_REGISTER_FAIL","USER_LIST_REQUEST","USER_LIST_SUCCESS","USER_LIST_FAIL","USER_LIST_RESET","login","email","password","dispatch","type","config","headers","data","post","payload","localStorage","setItem","JSON","stringify","error","response","message","register","name","listUser","getState","userLogin","userInfo","Authorization","token","get"],"mappings":"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","sourcesContent":["import axios from \"axios\";\nimport { USER_LOGIN_REQUEST, \n         USER_LOGIN_SUCCESS, \n         USER_LOGIN_FAIL , \n         USER_REGISTER_REQUEST, \n         USER_REGISTER_SUCCESS, \n         USER_REGISTER_FAIL, \n         USER_LIST_REQUEST,\n         USER_LIST_SUCCESS,\n         USER_LIST_FAIL,\n         USER_LIST_RESET} from \"../constants/userConstants\";\n\nexport const login = (email, password) => async (dispatch)=> {\n   try {\n       dispatch({\n           type: USER_LOGIN_REQUEST,\n       })\n       const config ={\n           headers:{\n               'Content-Type':'application/json',\n           },\n       }\n       const {data} = await axios.post(\n           '/api/users/login', {email, password}, config\n       )\n       dispatch({\n           type: USER_LOGIN_SUCCESS,\n           payload: data,\n       })\n\n       localStorage.setItem('userInfo', JSON.stringify(data))\n   } catch (error) {\n    dispatch({\n        type:USER_LOGIN_FAIL,\n        payload: error.response && error.response.data.message \n        ? error.response.data.message : error.message,\n    })\n   }\n}\n\nexport const register = (name, email, password) => async (dispatch)=> {\n    try {\n        dispatch({\n            type: USER_REGISTER_REQUEST,\n        })\n        const config ={\n            headers:{\n                'Content-Type':'application/json',\n            },\n        }\n        const {data} = await axios.post(\n            '/api/users', {name, email, password}, config\n        )\n        dispatch({\n            type: USER_REGISTER_SUCCESS,\n            payload: data,\n        })\n\n        dispatch({\n            type: USER_LOGIN_SUCCESS,\n            payload: data,\n        })\n \n        localStorage.setItem('userInfo', JSON.stringify(data))\n    } catch (error) {\n     dispatch({\n         type:USER_REGISTER_FAIL,\n         payload: error.response && error.response.data.message \n         ? error.response.data.message : error.message,\n     })\n    }\n }\n \n \n\n\n\n export const listUser = () => async (dispatch, getState)=> {\n    try {\n        dispatch({\n            type: USER_LIST_REQUEST,\n        })\n        const {userLogin:{userInfo}}= getState()\n        const config ={\n            headers:{\n                Authorization:`Bearer ${userInfo.token}`\n            },\n        }\n        const {data} = await axios.get(\n            `/api/users`, config\n        )\n        dispatch({\n            type: USER_LIST_SUCCESS,\n            payload: data,\n        })\n\n    } catch (error) {\n     dispatch({\n         type:USER_LIST_FAIL,\n         payload: error.response && error.response.data.message \n         ? error.response.data.message : error.message,\n     })\n    }\n }\n \n \n "]},"metadata":{},"sourceType":"module"}